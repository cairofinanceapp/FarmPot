PharaoFarmPoT Security Audit by BetweenETHLines

---Executive Summary---
TYPE: DeFi
ECOSYSTEM: Binance Smart Chain(BSC)
METHODS: Manual Review, Static Analysis, Hardhat Tests by Axxsol GmbH
LANGUAGE: Solidity
TIMELINE: Delivered on 02/14/2023KEY 
COMPONENTS: N/A
CODEBASE: https://github.com/cairofinanceapp/FarmPot
Audit Score: 98/100
Pre Audit vs Resolution 3: https://www.diffchecker.com/5hS0PpUn/

The `PharaoFarmPoT` contract is an investment contract which allows users to deposit tokens in order to receive the same tokens over a time period of 365 days as rewards back. 

Each user can deposit tokens via `deposit`, which will transfer the tokens from the user to the contract, applies a 15% fee on the deposit and grants the user a `maxPayout` with the factor 3.65 on the deposited amount after tax.

After a user has deposited tokens, these tokens are locked in the contract forever and can not be withdrawn again. The to expected payout amount is based on the initial deposit and the contract balance at the time of the claim and can be calculated as follows:

1.	Contract balance >= 10000000 tokens: 1% of initial deposit
2.	Contract balance >= 5000000 tokens: 0.75% of initial deposit
3.	Contract balance >= 2500000 tokens: 0.5% of initial deposit
4.	Everything below 2500000 tokens : 0.25% of initial deposit

These are the daily rewards a user can expect, however, this will not be the final amount to be paid out: a withdrawal tax is applied on top of that which depends on the ratio of `initialBalance` and the contract balance:

1.	`initialAmount` is 10% or more of the contract balance: 60% tax.
2.	`initialAmount` is 9% or more of the contract balance: 55% tax.
3.	`initialAmount` is 8% or more of the contract balance: 50% tax.
4.	`initialAmount` is 7% or more of the contract balance: 45% tax.
5.	`initialAmount` is 6% or more of the contract balance: 40% tax.
6.	`initialAmount` is 5% or more of the contract balance: 35% tax.
7.	`initialAmount` is 4% or more of the contract balance: 30% tax.
8.	`initialAmount` is 3% or more of the contract balance: 25% tax.
9.	`initialAmount` is 2% or more of the contract balance: 20% tax.
10.	`initialAmount` is 1% or more of the contract balance: 15% tax.
11.	`initialAmount` is below 1% of the contract balance: 10% tax

At this point, it is important to note that the `maxPayout` amount is in fact compared to the aggregated claimed amount before the tax has been applied. Below we will show a quick example of the `maxPayout` calculation:

1.	Alice deposits 100e18 tokens into the contract.
2.	Alice therefore has deposited 85e18 tokens after the fee has been applied.
3.	Alice now has a `maxPayout` of 31025e16 tokens, which is 85e18 * 3.65.
4.	Alice now calls `claimRewards` and receives 1e18 tokens as rewards.
5.	From these 1e18 tokens, she will receive a proRata share based on her individual `withdrawalFee`, however, Alice`s `claimed` variable will increase by 1e18, which means that she now only has a payout of 30925e16 tokens left.
The contract implements a unique referral system which allows up to 7 referral levels. All upstream referrers will receive a % of the underlying users deposit, which also applies for the `doubleUp` feature:

1.	The direct referrer will receive 10% of the deposit amount.
2.	The referrer of the referrer will receive 2.5% of the deposit amount.
3.	All other upstream referrers will receive 0.5% of the deposit amount

All in all, the referral rewards for each `deposit` and `doubleUp` are 15%, which perfectly aligns with the deposit fee which is 15%.

If a user has exceeded the `maxPayout`, the contract offers the so-called `doubleUp` function, which allows the user to start a new round of rewards. The user can simply deposit 2x the `initialAmount` from the round before. If the user calls `claimRewards` with `claimed` and `availableRewards` exceeding the `maxPayouts`, this excess amount will be stored in the `previousDoubleUp` variable, which then will be simply added to the `availableRewards` when `doubleUp` is called.

One important edge-case is when the user accumulated such a huge amount of rewards that the new initial balance within the `doubleUp` function is already fully covered. If that is the case, the excess amount is also simply assigned to the `previousDoubleUp` variable which then will be granted to the user's next reward claim.

During deployment, the deployer address will be assigned to the so called `firstAddress`, contrary to the usual referrers, this address will accumulate rewards even if the `maxPayout` is already exceeded. We assume that this will be the default address which is provided by the front-end, if the user doesn’t assign a specific reward address. This address can then claim rewards via `claimRewardsFirstAddress` without any withdrawal fee.

This feature was removed during the resolution rounds, therefore the deployer will not have any benefits - in fact, it is not possible to grant any rewards to the deployer address.

---Issues---

#1


Problem: The `availableRewards` function is severely flawed
Impact:	High
Description:	Currently, the `availableRewards` function returns `_maxPayout` whenever `claimedRewards` and `avail` exceed `_maxPayout`.

Consider the following PoC:

1.	Alice deposits 100e18 tokens
2.	Alices interacts with the contract until `claimed` + `availRewards` exceeds `maxPayout.
3.	Alice now calls `doubleUp` 
4.	`_availableRewards` within `doubleUp` will now be assigned a huge value due to the return flaw within `availableRewards`. In fact, it will be 310.25e18 tokens
5.	The newly calculated `finalAmount` is 100e18 *2 = 200e18
6.	Since `_availableReward` is now larger than `finalAmount` the function will jump to the else clause.
7.	The user now will be granted a complete new `maxPayout` which is now 620.5e18 tokens while the user even gets `previousDoubleUp` assigned with `310.25e18 - 200e18`.
8.	All of this will happen without the user transferring any tokens to the contract.



Moreover, the function returns zero, even when `claimedRewards = maxPayout`. This will become an issue in the following PoC:
1.	Alice deposits 100e18 tokens
2.	Alice now interacts with the contract
3.	Alice now comes to a point where she will exactly reach her `maxPayout`
4.	Alice now calls `claimRewards`. If she would exceed her `maxPayout` it would automatically assign the excess value to `previousDoubleUp`. However, in that edge-case she does not exceed it but directly hits it. 

This means the function will enter the else clause which fulfills the regular logic. After that has been passed, Alice will never be able to accumulate rewards for the `previousDoubleUp` variable, while theoretically she should receive that. 

This PoC was created with the assumption that the first issue with the inflated return value is fixed, otherwise step 4 would not assign the correct value to Alice.


Another small issue is within the following line:

`else  if(claimedRewards+avail >= _maxpayout)`

In fact, that should just be `>` as `=` would simply mean that `avail` can be granted, which means that the logic below with 

```
else{ 

return avail; 

}
```
should suffice.

Suggestion:
Consider fixing the first issue by just returning the leftover amount until `maxPayout` is reached. This fixes the issue where user’s will get a free round, however, this will make the `previousDoubleUp` variable unnecessary. Another idea would be to also simply return the complete available rewards, this would align with the logic of `previousDoubleUp`. We will keep the final fix to the contract developer as he is the one who finally decides how this project should work.

Moreover, it might make sense to exclude the `claimedRewards = maxPayout` case from the zero return in order to get any `prevDoubleUp` granted.

Progress:
Acknowledged, the client indicated that it is desired that all follow-up rounds will be for free. However, this does only make very little sense to us, since the following line indicates another logic: 

```
if (_availableRewards < finalAmount) { 
CAFToken.safeTransferFrom( msg.sender, address(this), finalAmount - _availableRewards );

```
In that case, `_availableRewards` is always assigned to `maxPayout` which means that this if clause will never be reached. Hence we assume there might be a misunderstanding in the clients desired logic, however, it was decided  to be kept as-is.
The reason for the above assumption is that the `doubleUp` function can never be called if `claimed + available < maxPayout`, hence the return of `availableRewards` will always be `_maxPayout`, never entering the if-clause.
To substantiate the above statement consider the two potential scenarios when `doubleUp` can be called:

1.	`available+claimed` does NOT exceed `maxPayout`
2.	This case would result in the if clause in line 1353 because `_availableRewards` is below `finalAmount`.
3.	However, due to the check in line 1339, this will revert immediately.

1.	`available+claimed` does exceed `maxPayout`
2.	This case results in `_availableRewards` being larger than `finalAmount` because it is assigned to `_maxPayout`

These two are the only possible status quo’s. Either exceed `maxPayout` or not exceed it.
The second issue was acknowledged as well.

Resolution 2:

After a discussion with the team the following solution was implemented: 

The `availableRewards` now returns `avail` for the 2nd case. This ensures that `claimRewards` and `doubleUp` work as intended. 

This will fix the first issue.


#2


Problem:	Users will lose rewards if they call claim within two days
Impact:	High
Description: Due to the nature of solidity rounding down, users will only receive rewards for one fulfilled day. 

If for example a user calls `claimRewards` with 100_000 seconds passed since the last claim, the reward will only be granted for 86_400 seconds, resulting in a loss of 13_600 seconds of rewards. This example works with all times between two days.
Suggestion	Consider switching the reward calculation logic from days to hours or even seconds in order to avoid the potential loss of user rewards.

Progress:	Resolved, the client switched to hourly logic with these parameters:

1.	0.0416% per hour 
2.	0.0312% per hour
3.	0.0208% per hour
4.	0.0125% per hour
Moreover, this allows for removal of the check in the `deposit` function which allows users to only claim once per day and simply add a check that only allows users to claim once per hour. This will resolve all potential reward losses. Alternatively, the daily check can just be left as-is. This will ensure no rewards will be lost but only lets users claim once per day, which is in our opinion still a great solution.


#3


Problem: Mathematical operations within `refer` are flawed.
Impact:	High
Description:	Currently, the `refer` function is the only function which follows the correct logic to determine if and how much rewards the referrer should get. 

It nicely checks `available + claimed + rew < max` and then grants the full amount of `rew` to `referralRewards`. 

For the case of exceeding `max`, the function nicely calculates the leftover amount until `max` is reached and then grants the leftover amount to `referralRewards` to exactly reach `max`. 

However, during this calculation there is a flaw:

```
else if( max - claimed + available >0)
         uint256 gib = max   - claimed+ available ;
         if(gib > rew){
              gib= rew;

           }
```

For the leftover calculation, there are parenthesis missing:
`else if( max - claimed + available >0)`,
in fact it should be 
`else if( max - (claimed + available) >0)` 
to calculate the correct leftover amount. This case will always result in following the logic below, even if the `claimed` amount alone would exceed `max` which then results in granting rewards even if that should not be the case.

In order to avoid any reverts due to underflow in the else clause, all used variables (`max`, `claimed` and `available`) will need to be converted to `int` and then converted back to `uint` for their secondary uses.

Moreover, the following line should be `<=`

`if (available + claimed +rew < max`

In fact, it can be <= because the equal case means that the whole `rew` can still be granted.



Suggestion:	Consider adding parenthesis around the red market snippets in order to avoid granting rewards if the referrer exceeds the `maxPayout`
            Furthermore, consider fixing the exclusion of the equal case.

Progress:	Solved, the client added parenthesis around the vulnerable operations. However, in line 1180 there are parenthesis missing which results in a wrongly calculated leftover amount that might result in exceed of `maxPayout`. All necessary variables were converted to the correct type.

Resolution 2:

The client fixed the issue with missing parentheses in line 1180 as well.


#4

Problem:	Contract does not adhere to the checks-effects-interactions pattern
Impact:	Medium
Description:	Currently, the contract has a lot of spots where the checks-effects-interactions pattern is not respected: 

https://fravoll.github.io/solidity-patterns/checks_effects_interactions.html

All external calls should only be executed at the end of the function, if the function flow allows for that, otherwise that can result in a potential reentrancy attack.
A quick escalation example:

```
function claimRewardsFirstAddress() public { 
require(msg.sender == firstAddress); 
uint256 refRew = user_data[msg.sender].referralRewards;
CAFToken.safeTransfer(msg.sender, refRew); 
user_data[msg.sender].referralRewards = 0;
```

This pattern is typically for a reentrancy attack. If the contract uses a token that calls a hook on receive. the `firstAddress` can drain the whole contract within a single transaction.

Suggestion:	Consider adhering to the checks-effects-interactions pattern throughout the contract.

Progress:	Acknowledged, the client indicated that they are aware of this issue and added `nonReentrant` modifiers. While this is not the optimal solution, it works as intended.


#5


Problem:	Inconsistent referrer logic
Impact:	Low
Description:	The contract contains several spots where it compares the referrer's reward + claimed amount to the maxPayout and therefore decides if the referrer gets any rewards granted or not.
However, the contract uses two different logics to do that:

First logic:

```
if (available + claimed < max || referAddress == firstAddress) { 
user_data[referAddress].referralRewards +=refRew;
 }
```

This logic simply checks if `available` + `claimed` are below `maxPayout` in order to ensure that the referrer does not exceed the `maxPayout` with the granted rewards. However, the check does not include the potential referral rewards which can result in the referrer exceeding `maxPayout`

Second logic:

```
if (available + claimed +rew < max|| uplineUserAddress == firstAddress ){ 

emit ReferralRewarded(msg.sender,uplineUserAddress, rew);

user_data[uplineUserAddress].referralRewards += rew;

 }

else if ( max - claimed + available >0){

 uint256 gib = max   - claimed+ available ;
 if(gib > rew){

      gib= rew;
    user_data[uplineUserAddress].referralRewards += gib;//
   emit ReferralRewarded(msg.sender,uplineUserAddress, rew);
 }
```

While we ignore the flaws which have been pointed out in another issue, this logic makes more sense to us: it nicely checks if claimed + both rewards exceed `maxPayout` and only then it increases `referralRewards`.

If that is not the case, it will simply increase `referralRewards` by the maximum difference which is possible to add in order to not exceed `maxPayout`.

In our opinion, the second logic (after fixes have been applied) is cleaner and should be used. However, finally the developer decides which logic to use


Suggestion	Consider using the second logic throughout the contract.
Progress	Solved, the client chose to use the second logic throughout the contract. However, unfortunately there was a bug implemented in line 1180 which eventually allows for the referrer to exceed `maxPayout`. Therefore we recommend adding parentheses around the vulnerable spot as this is the case with the other referral spots.

Resolution 2:
The client fixed the issue in line 1180 by adding parentheses.

#6

Problem:	`startTime` can only be decreased
Impact:	Low
Description:	Currently, the `changeStartTime` function only allows a decrease in `startTime`. 
However, it might be valuable for the developer to also shift the `startTime` to the future.

Suggestion:	Consider adding logic that allows shifting the `startTime` to the future.
Progress:	Resolved. 

The client decided to remove this function completely.


#7


Problem:	Gas optimization
Impact:	Informational
Description:	The contract contains a few spots which can be optimized in order to save gas. 

To keep the report size reasonable we will aggregate all issues below.
1) 

`uint256 internal maxPayout = 365;`
`uint256 internal DEPOSITE_TAX_RATE = 15`
`uint256 public MIN_DEPOSIT_AMOUNT = 100 * 1e18;`


Variables that never change should be marked as constant, this will save some gas because they are directly written into the bytecode.

2) 
`address[] storage array = level7[userAddresss].referred;` 

Variables that are only used as return value in a view function can be cached into memory in order to save gas. While the view function itself does not consume any gas, it still can be used by other contracts within a function call. 

This issue applies to all level view functions.


Suggestion:	Consider following the aforementioned recommendations.
Progress:	Resolved.


#7


Problem:	Typographical errors
Impact:	Informational
Description:	The contract contains a few spots with typographical errors, unused variables, unnecessary declarations etc.

In order to keep the report size reasonable we will aggregate all issues below.
1)
using SafeMath for uint256;

This line can be removed since the contract is compiled with solidity ^0.8.0. Moreover all safemath operations should be replaced.
2)

uint256 public BASE_WITHDRAW_FEE = 10;

This variable is unused, consider removing it.

3)
```
struct level1Address { 
address[] referred; 
uint256 userAddress;
 }
```

The `userAddress` variable is completely unused and can therefore be removed. This issue applies to all level structs.

4)

Numerous events are unused, consider using them properly.

5)

`firstAddress = msg.sender;`

`firstAddress` is assigned twice, consider removing the second assignment.

6)

`function changeStartTime(uint256 startTimeNew) public onlyOwner`

Functions that are only externally callable should be declared as such. Consider declaring this function as external.

7) 

`function deposit(uint256 amount, address referAddress) public nonReentrant`

Functions that are only externally callable should be declared as such. Consider declaring this function as external.

8) 

`require(referAddress != address(0), "Invalid Refer address");`

Since the requirement already ensures a valid referrer address, since check can be removed.


9) 

```
uint256 allowance = CAFToken.allowance(msg.sender, address(this)); require( allowance >= amount, "Allowance should be greater or equal to amount" );
```

This check is redundant since the `transferFrom` will automatically revert if the allowance is not granted. This issue also applies to `doubleUp`.

10) 

`emit ReferralRewarded(referAddress,msg.sender, refRew);`

The parameters are wrong: `referAddress` and `msg.sender` should be vice-versa. Moreover, this event is emitted outside the if-clause which means that it is even emitted when no reward is granted.

11) 

`for (uint256 i = 0; i <= 6; i++)`

This should be `<6` since there are only a total of 7 upline referrers while the first direct referrer was already accounted for.

If that fix is applied, the following line can be removed because this check becomes redundant:

`if (currentDistributionLevel < 7)`

The same applies to `reinvestRefer`.

12) 

`function getMaxPayout(address userAddress) public view returns (uint256)`

Functions that are only externally callable should be declared as such. Consider declaring this function as external.

13) 

`function claimRewardsFirstAddress() public`

Functions that are only externally callable should be declared as such. Consider declaring this function as external.

14) 

`function getDay() public view returns (uint256)`

Functions that are only externally callable should be declared as such. Consider declaring this function as external.

15)

`function claimRewards() public nonReentrant`
Functions that are only externally callable should be declared as such. Consider declaring this function as external.

16) 

`require(interest >= 0, "Can't claim if nothing is available");`

This check should be `>0`

17)

`function doubleUp() public nonReentrant`

Functions that are only externally callable should be declared as such. Consider declaring this function as external.


Suggestion:	Consider fixing all aforementioned issues.
Progress:	Resolved. 
Most of the issues have been fixed and logic for the `firstAddress` has been removed. 
Consider removing all leftover spots where `firstAddress` is used or mentioned as it's just a dead variable now.


!!!Disclaimer!!!
The content of this assessment is not an investment advice and does not constitute any offer or solicitation to offer or recommendation of any investment product. 
It is for general purposes only and does ndation of any investmot take into account your individual needs, investment objectives and specific financial circumstances.
Investment involves risk and @betweenETHLines does not warrant, endorse, or assume liability for your investment decisions. 
Moreover, an audit does not guarantee 100% safety of all contracts, it is a manual analysis of the contracts to the best of our knowledge and belief.



